---
description: "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TypeScript –≤ FSD React –ø—Ä–æ–µ–∫—Ç–µ"
globs: ["**/*.{ts,tsx}"]
alwaysApply: true
---

# TypeScript Rules

## üî∑ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

### –°—Ç—Ä–æ–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TypeScript
```json
// tsconfig.json (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
{
  "compilerOptions": {
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "exactOptionalPropertyTypes": true
  }
}
```

### –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
interface UserProps {           // Props –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  name: string;
}

type UserRole = 'admin' | 'user';  // Union types
type UserData = Pick<User, 'name' | 'email'>;  // Utility types

enum UserStatus {               // Enums –≤ PascalCase
  ACTIVE = 'active',
  INACTIVE = 'inactive',
}

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
interface IUser { }             // –ò–∑–±–µ–≥–∞–π –ø—Ä–µ—Ñ–∏–∫—Å I
type userRole = 'admin';        // camelCase –¥–ª—è —Ç–∏–ø–æ–≤
interface user_props { }        // snake_case
```

## üèóÔ∏è FSD –¢–∏–ø–∏–∑–∞—Ü–∏—è

### Entity Types
```typescript
// entities/user/model/types.ts
export interface User {
  id: string;
  email: string;
  name: string;
  role: UserRole;
  profile?: UserProfile;
  createdAt: Date;
  updatedAt: Date;
}

export interface UserProfile {
  avatar?: string;
  bio?: string;
  location?: string;
}

export type UserRole = 'admin' | 'moderator' | 'user';

// API types
export interface CreateUserData {
  email: string;
  name: string;
  password: string;
}

export interface UpdateUserData extends Partial<Pick<User, 'name'>> {
  profile?: Partial<UserProfile>;
}
```

### Feature Types
```typescript
// features/auth/model/types.ts
export interface LoginFormData {
  email: string;
  password: string;
  remember?: boolean;
}

export interface AuthState {
  user: User | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
}

export interface AuthActions {
  login: (data: LoginFormData) => Promise<void>;
  logout: () => void;
  refreshToken: () => Promise<void>;
}
```

## ‚öõÔ∏è React + TypeScript

### Component Props
```typescript
// ‚úÖ –¢–∏–ø—ã –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤
type ButtonProps = {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  onClick?: () => void;
}

// –î–ª—è —Ä–∞—Å—à–∏—Ä—è–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
type ButtonProps = {
  variant?: 'primary' | 'secondary';
  size?: 'small' | 'medium' | 'large';
} & React.ButtonHTMLAttributes<HTMLButtonElement>

export const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'medium',
  ...props 
}: ButtonProps) => {
  return (
    <button 
      className={cn(styles.button, styles[variant], styles[size])} 
      {...props}
    >
      {children}
    </button>
  );
};
```

### Event Handlers
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
type FormProps = {
  onSubmit: (data: FormData) => void;
}

export const Form = ({ onSubmit }: FormProps) => {
  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    onSubmit(formData);
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    console.log(event.target.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input onChange={handleInputChange} />
    </form>
  );
};
```

### Hooks —Ç–∏–ø–∏–∑–∞—Ü–∏—è
```typescript
// ‚úÖ Custom hooks
type UseUserReturn = {
  user: User | null;
  isLoading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
}

export const useUser = (id: string): UseUserReturn => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // ... –ª–æ–≥–∏–∫–∞

  return { user, isLoading, error, refetch };
};

// –¢–∏–ø–∏–∑–∞—Ü–∏—è useState
const [count, setCount] = useState<number>(0);
const [users, setUsers] = useState<User[]>([]);
const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
```

## üõ†Ô∏è Utility Types

### –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö —Ç–∏–ø–æ–≤
```typescript
// entities/user/model/types.ts
export interface User {
  id: string;
  email: string;
  name: string;
  password: string;  // sensitive data
  createdAt: Date;
  updatedAt: Date;
}

// –ü—É–±–ª–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø–∞—Ä–æ–ª—è
export type PublicUser = Omit<User, 'password'>;

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export type CreateUserData = Pick<User, 'email' | 'name'> & {
  password: string;
};

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
export type UpdateUserData = Partial<Pick<User, 'name' | 'email'>>;

// Form data
export interface UserFormData extends Pick<User, 'name' | 'email'> {
  confirmPassword?: string;
}
```

### Generic Types
```typescript
// shared/types/api.ts
export interface ApiResponse<T> {
  data: T;
  message: string;
  success: boolean;
}

export interface PaginatedData<T> {
  items: T[];
  total: number;
  page: number;
  limit: number;
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
type UserResponse = ApiResponse<User>;
type UsersResponse = ApiResponse<PaginatedData<User>>;
```

### Conditional Types
```typescript
// –ü—Ä–∏–º–µ—Ä advanced —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
type NonNullable<T> = T extends null | undefined ? never : T;

type ApiEndpoint<T> = T extends 'user' 
  ? '/api/users'
  : T extends 'product'
  ? '/api/products'
  : never;

// Mapped Types
type FormFieldErrors<T> = {
  [K in keyof T]?: string;
};

interface UserForm {
  email: string;
  name: string;
}

type UserFormErrors = FormFieldErrors<UserForm>;
// { email?: string; name?: string; }
```

## üìù Type Guards

```typescript
// entities/user/lib/guards.ts
export function isUser(value: unknown): value is User {
  return (
    typeof value === 'object' &&
    value !== null &&
    'id' in value &&
    'email' in value &&
    typeof (value as any).id === 'string' &&
    typeof (value as any).email === 'string'
  );
}

export function isUserArray(value: unknown): value is User[] {
  return Array.isArray(value) && value.every(isUser);
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
function processUserData(data: unknown) {
  if (isUser(data)) {
    // data is User
    console.log(data.email); // TypeScript –∑–Ω–∞–µ—Ç —á—Ç–æ —ç—Ç–æ User
  }
}
```

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ Environment

```typescript
// shared/config/env.ts
interface EnvironmentConfig {
  API_URL: string;
  APP_NAME: string;
  IS_DEVELOPMENT: boolean;
  IS_PRODUCTION: boolean;
}

function createConfig(): EnvironmentConfig {
  const apiUrl = process.env.REACT_APP_API_URL;
  const appName = process.env.REACT_APP_NAME;

  if (!apiUrl || !appName) {
    throw new Error('Missing required environment variables');
  }

  return {
    API_URL: apiUrl,
    APP_NAME: appName,
    IS_DEVELOPMENT: process.env.NODE_ENV === 'development',
    IS_PRODUCTION: process.env.NODE_ENV === 'production',
  };
}

export const config = createConfig();

// Type-safe environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      REACT_APP_API_URL: string;
      REACT_APP_NAME: string;
      NODE_ENV: 'development' | 'production' | 'test';
    }
  }
}
```

## üö´ –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å:

1. **any** - –∏—Å–ø–æ–ª—å–∑—É–π unknown –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã
2. **as** assertions –±–µ–∑ type guards
3. **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è** —Ç–∞–º –≥–¥–µ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
4. **–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ** generic —Ç–∏–ø—ã
5. **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤** –º–µ–∂–¥—É —Å–ª–æ—è–º–∏

## ‚úÖ Best Practices:

1. **–°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è** –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
2. **Type guards** –¥–ª—è runtime –ø—Ä–æ–≤–µ—Ä–æ–∫
3. **Utility types** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö —Ç–∏–ø–æ–≤
4. **Branded types** –¥–ª—è ID –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤
5. **Exhaustive checks** –≤ switch statements

```typescript
// Branded types –ø—Ä–∏–º–µ—Ä
type UserId = string & { readonly brand: unique symbol };
type ProductId = string & { readonly brand: unique symbol };

function createUserId(id: string): UserId {
  return id as UserId;
}

// Exhaustive check
type Status = 'loading' | 'success' | 'error';

function handleStatus(status: Status) {
  switch (status) {
    case 'loading':
      return 'Loading...';
    case 'success':
      return 'Success!';
    case 'error':
      return 'Error occurred';
    default:
      // TypeScript –æ—à–∏–±–∫–∞ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ cases –ø–æ–∫—Ä—ã—Ç—ã
      const exhaustive: never = status;
      return exhaustive;
  }
}
```