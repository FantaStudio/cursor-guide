---
description: "–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –≤ FSD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"
globs: ["**/api/**/*.{ts,tsx}", "**/model/**/*.ts"]
alwaysApply: true
---

# API Layer Rules

## üåê –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ API

### –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ API –∫–æ–¥–∞
- **entities/*/api/** - API –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
- **shared/api/** - –±–∞–∑–æ–≤—ã–µ API —É—Ç–∏–ª–∏—Ç—ã, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
- **–ù–ï –≤ features** - features –∏—Å–ø–æ–ª—å–∑—É—é—Ç entities API

```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
entities/user/api/
‚îú‚îÄ‚îÄ index.ts          # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö API –º–µ—Ç–æ–¥–æ–≤
‚îú‚îÄ‚îÄ userApi.ts        # CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
‚îî‚îÄ‚îÄ types.ts          # API —Ç–∏–ø—ã –∏ —Å—Ö–µ–º—ã

shared/api/
‚îú‚îÄ‚îÄ index.ts          # –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç
‚îú‚îÄ‚îÄ base.ts           # –ë–∞–∑–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç
‚îú‚îÄ‚îÄ types.ts          # –û–±—â–∏–µ API —Ç–∏–ø—ã
‚îî‚îÄ‚îÄ interceptors.ts   # Interceptors –¥–ª—è axios/fetch
```

## üîå API –ö–ª–∏–µ–Ω—Ç

### –ë–∞–∑–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç
```typescript
// shared/api/base.ts
import axios from 'axios';

export const apiClient = axios.create({
  baseURL: process.env.REACT_APP_API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptors –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
apiClient.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});
```

### Entity API
```typescript
// entities/user/api/userApi.ts
import { apiClient } from 'shared/api';
import type { User, CreateUserData, UpdateUserData } from '../model/types';

export const userApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUser(id: string): Promise<User> {
    const response = await apiClient.get<User>(`/users/${id}`);
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUsers(params?: { page?: number; limit?: number }): Promise<User[]> {
    const response = await apiClient.get<User[]>('/users', { params });
    return response.data;
  },

  // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createUser(data: CreateUserData): Promise<User> {
    const response = await apiClient.post<User>('/users', data);
    return response.data;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUser(id: string, data: UpdateUserData): Promise<User> {
    const response = await apiClient.put<User>(`/users/${id}`, data);
    return response.data;
  },

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUser(id: string): Promise<void> {
    await apiClient.delete(`/users/${id}`);
  },
};
```

## üìù –¢–∏–ø–∏–∑–∞—Ü–∏—è API

### API Response Types
```typescript
// shared/api/types.ts
export interface ApiResponse<T> {
  data: T;
  message: string;
  status: 'success' | 'error';
}

export interface PaginatedResponse<T> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface ApiError {
  message: string;
  code: string;
  details?: Record<string, string>;
}
```

### Entity Types
```typescript
// entities/user/model/types.ts
export interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateUserData {
  email: string;
  name: string;
  password: string;
}

export interface UpdateUserData {
  name?: string;
  avatar?: string;
}

// API —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã
export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  user: User;
  token: string;
  refreshToken: string;
}
```

## ‚ö° React Query Integration

### Query Keys
```typescript
// entities/user/api/queryKeys.ts
export const userQueryKeys = {
  all: ['users'] as const,
  lists: () => [...userQueryKeys.all, 'list'] as const,
  list: (params?: object) => [...userQueryKeys.lists(), params] as const,
  details: () => [...userQueryKeys.all, 'detail'] as const,
  detail: (id: string) => [...userQueryKeys.details(), id] as const,
};
```

### Custom Hooks
```typescript
// entities/user/api/hooks.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { userApi } from './userApi';
import { userQueryKeys } from './queryKeys';

export const useUser = (id: string) => {
  return useQuery({
    queryKey: userQueryKeys.detail(id),
    queryFn: () => userApi.getUser(id),
    enabled: !!id,
  });
};

export const useUsers = (params?: { page?: number; limit?: number }) => {
  return useQuery({
    queryKey: userQueryKeys.list(params),
    queryFn: () => userApi.getUsers(params),
  });
};

export const useCreateUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: userApi.createUser,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: userQueryKeys.lists() });
    },
  });
};
```

## üîÑ Error Handling

### API Error Handler
```typescript
// shared/api/errorHandler.ts
import { AxiosError } from 'axios';
import { ApiError } from './types';

export const handleApiError = (error: AxiosError<ApiError>) => {
  if (error.response) {
    // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π
    const { data, status } = error.response;
    console.error(`API Error ${status}:`, data.message);
    return data;
  } else if (error.request) {
    // –ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ—à–µ–ª –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
    console.error('Network Error:', error.message);
    return { message: 'Network error', code: 'NETWORK_ERROR' };
  } else {
    // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
    console.error('Error:', error.message);
    return { message: 'Unknown error', code: 'UNKNOWN_ERROR' };
  }
};
```

## üö´ –ß—Ç–æ –ù–ï–õ–¨–ó–Ø –¥–µ–ª–∞—Ç—å:

1. **API –≤—ã–∑–æ–≤—ã –≤ features** - –∏—Å–ø–æ–ª—å–∑—É–π entities API
2. **–ü—Ä—è–º—ã–µ fetch –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö** - –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏
3. **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–µ—Ç–æ–¥–æ–≤** –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
4. **–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏** API –æ—Ç–≤–µ—Ç–æ–≤
5. **–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫** API

## ‚úÖ Best Practices:

1. **–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**
2. **–ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ query keys** –¥–ª—è React Query
3. **–¢–∏–ø–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö API –æ—Ç–≤–µ—Ç–æ–≤**
4. **–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ React Query**
5. **Optimistic updates** –¥–ª—è –ª—É—á—à–µ–≥–æ UX